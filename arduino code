#include <Arduino.h>
#include <U8g2lib.h>

// OLED setup (128×64 SH1106 over I²C)
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);

// 'boostguage', 128x64px (static background)
const unsigned char epd_bitmap_boostguage [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf8, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xe0, 0x3e, 0x00, 0x00, 0xb8, 0x0f, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xe0, 0x36, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xc0, 0x36, 0x00, 0x00, 0xb0, 0x0f, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xc0, 0x36, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xc0, 0x36, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 
	0xf8, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xc0, 0x3e, 0x00, 0x00, 0xb0, 0x0f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x80, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x02, 0x08, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x70, 0x77, 0x1c, 0x63, 0xee, 0x00, 0x00, 0x00, 0xc0, 0xd9, 0xd5, 0x05, 0x8e, 0x31, 0x77, 0x00, 
	0x10, 0x21, 0xa4, 0x94, 0x42, 0x02, 0x00, 0x00, 0x40, 0x85, 0x54, 0x05, 0x52, 0x4a, 0x21, 0x01, 
	0x70, 0x27, 0xbc, 0x94, 0x4e, 0x00, 0x00, 0x00, 0xc0, 0x85, 0xd4, 0x05, 0x4e, 0x4a, 0x27, 0x00, 
	0x40, 0x21, 0xa4, 0x94, 0x48, 0x02, 0x00, 0x00, 0x40, 0x85, 0x54, 0x05, 0x52, 0x4a, 0x24, 0x01, 
	0x70, 0x27, 0x1c, 0x63, 0x4e, 0x00, 0x00, 0x00, 0x40, 0x99, 0x5c, 0x1d, 0x8e, 0x31, 0x27, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Pin definitions
const uint8_t POT_PIN = A1;    // pot wiper → 5–15 PSI set-point
const uint8_t MAP_PIN = A0;    // MAP sensor out (0–3 V)
const uint8_t SOL_PIN = 9;     // MOSFET gate → 3-port solenoid

// ADC & voltage reference
const float VCC     = 5.0f;    // supply voltage
const float ADC_MAX = 1023.0f; // 10-bit ADC

// Calibration lookup table (V → PSI)
const int   N_CAL     = 7;
const float calV[N_CAL]   = { 0.0f,  0.5f,   1.0f,  1.5f,  2.0f,   2.5f,  3.0f };
const float calPSI[N_CAL] = {-14.7f, -7.35f,  0.0f,  7.25f, 14.5f,  21.75f, 29.0f };

// Bar-graph parameters
const int     BAR_SCALE_MAX_PSI = 30;  // map 0–30 PSI → full width
const uint8_t BAR_X      = 6;
const uint8_t BAR_Y      = 16;
const uint8_t BAR_MAX_W  = 116;
const uint8_t BAR_HEIGHT = 8;

void setup() {
  u8g2.begin();
  pinMode(SOL_PIN, OUTPUT);
  analogWrite(SOL_PIN, 0);  // solenoid off at start
}

void loop() {
  //
  // [1] Read & average POT → desired boost set-point (5–15 PSI)
  //
  float potSum = 0;
  for (int i = 0; i < 8; i++) {
    potSum += analogRead(POT_PIN);
    delay(2);
  }
  float potAvg = potSum / 8.0f;
  int psiSet = map(int(potAvg), 0, 1023, 5, 15);

  //
  // [2] Read & average MAP sensor → voltage (0–3 V)
  //
  float mapSum = 0;
  for (int i = 0; i < 8; i++) {
    mapSum += analogRead(MAP_PIN);
    delay(2);
  }
  float mapAvg = mapSum / 8.0f;
  float Vout = mapAvg * (VCC / ADC_MAX);

  //
  //    → clamp to table range
  //    → find which two points it falls between
  //    → piece-wise linear interpolate to get real PSI
  //
  float V = constrain(Vout, calV[0], calV[N_CAL-1]);
  int idx = 0;
  while (idx < N_CAL-1 && V > calV[idx+1]) idx++;

  float psiMapF = calPSI[idx]
                + (calPSI[idx+1] - calPSI[idx])
                * (V - calV[idx])
                / (calV[idx+1] - calV[idx]);

  int psiMap = (psiMapF >= 0)
               ? int(psiMapF + 0.5f)
               : int(psiMapF - 0.5f);

  //
  // [3] Simple proportional “control” → PWM duty (0–255)
  //
  float error = psiSet - psiMap;
  int duty = constrain(int((error / 15.0f) * 255.0f), 0, 255);
  analogWrite(SOL_PIN, duty);

  //
  // [4] Draw gauge + text
  //
  u8g2.clearBuffer();
  u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_boostguage);

  // fill-bar from 0…BAR_SCALE_MAX_PSI → 0…BAR_MAX_W
  int barW = 0;
  if (psiMap > 0) {
    int p = constrain(psiMap, 0, BAR_SCALE_MAX_PSI);
    barW = map(p, 0, BAR_SCALE_MAX_PSI, 0, BAR_MAX_W);
  }
  u8g2.drawBox(BAR_X, BAR_Y, barW, BAR_HEIGHT);

  // set-point (lower-left)
  u8g2.setFont(u8g2_font_fub11_tr);
  u8g2.setCursor(0, 62);
  u8g2.print(psiSet);
  u8g2.print(" PSI");

  // actual (lower-right)
  char buf[12];
  snprintf(buf, sizeof(buf), "%d PSI", psiMap);
  uint8_t tw = u8g2.getUTF8Width(buf);
  u8g2.setCursor(128 - tw, 62);
  u8g2.print(buf);

  u8g2.sendBuffer();
  delay(100);
}
