#include <Arduino.h>
#include <U8g2lib.h>

// ── OLED setup (128×64 SH1106 over I²C) ──
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);

// 'boostguage', 128x64px (static background)
const unsigned char epd_bitmap_boostguage [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf8, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xe0, 0x3e, 0x00, 0x00, 0xb8, 0x0f, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xe0, 0x36, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xc0, 0x36, 0x00, 0x00, 0xb0, 0x0f, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xc0, 0x36, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xc0, 0x36, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 
	0xf8, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xc0, 0x3e, 0x00, 0x00, 0xb0, 0x0f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x80, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x02, 0x08, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x70, 0x77, 0x1c, 0x63, 0xee, 0x00, 0x00, 0x00, 0xc0, 0xd9, 0xd5, 0x05, 0x8e, 0x31, 0x77, 0x00, 
	0x10, 0x21, 0xa4, 0x94, 0x42, 0x02, 0x00, 0x00, 0x40, 0x85, 0x54, 0x05, 0x52, 0x4a, 0x21, 0x01, 
	0x70, 0x27, 0xbc, 0x94, 0x4e, 0x00, 0x00, 0x00, 0xc0, 0x85, 0xd4, 0x05, 0x4e, 0x4a, 0x27, 0x00, 
	0x40, 0x21, 0xa4, 0x94, 0x48, 0x02, 0x00, 0x00, 0x40, 0x85, 0x54, 0x05, 0x52, 0x4a, 0x24, 0x01, 
	0x70, 0x27, 0x1c, 0x63, 0x4e, 0x00, 0x00, 0x00, 0x40, 0x99, 0x5c, 0x1d, 0x8e, 0x31, 0x27, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// ── Pin definitions ──
const uint8_t POT_PIN = A1;   // pot → 5–15 PSI set-point
const uint8_t MAP_PIN = A0;   // GlowShift sender → 0–3 V out
const uint8_t SOL_PIN = 9;    // MOSFET gate → boost solenoid

// ── ADC & reference ──
const float VCC     = 5.0f;   // feeding both Arduino AREF and sender
const float ADC_MAX = 1023.0f;

// ── Nominal V→PSI lookup (0–3 V ↔ –14.7…+29 PSI) ──
const int   N_CAL     = 7;
const float calV[N_CAL]   = { 0.0f,  0.5f,   1.0f,   1.5f,  2.0f,   2.5f,  3.0f };
const float calPSI[N_CAL] = {-14.7f, -7.35f,  0.0f,   7.25f, 14.5f,  21.75f, 29.0f };

// ── Your measured two-point calibration ──
//   At true 0 PSI (engine off) you measured raw_psi = –4 → need +4 offset
//   At true –16 PSI (idle)   you measured raw_psi = –11 → need gain so (–11+4)*gain=–16
const float CAL_OFFSET =  4.0f;            // shifts –4→0
const float CAL_GAIN   = 16.0f / 7.0f;     // ≈2.2857

// ── Bar-graph params (unchanged) ──
const int     BAR_SCALE_MAX_PSI = 30;
const uint8_t BAR_X      = 6, BAR_Y = 16, BAR_MAX_W = 116, BAR_HEIGHT = 8;

void setup() {
  // — Serial for live laptop output —
  Serial.begin(115200);
  analogReference(DEFAULT);     // compare sensor → same 5 V rail

  // — OLED & solenoid init —
  u8g2.begin();
  pinMode(SOL_PIN, OUTPUT);
  analogWrite(SOL_PIN, 0);
}

void loop() {
  // [1] 8× oversample pot → 5–15 PSI set-point
  float potSum = 0;
  for (int i = 0; i < 8; i++) {
    potSum += analogRead(POT_PIN);
    delay(2);
  }
  int psiSet = map(int(potSum / 8.0f), 0, 1023, 5, 15);

  // [2] 8× oversample MAP → voltage (0–3 V)
  float mapSum = 0;
  for (int i = 0; i < 8; i++) {
    mapSum += analogRead(MAP_PIN);
    delay(2);
  }
  float Vout = (mapSum / 8.0f) * (VCC / ADC_MAX);

  // → clamp & find table segment
  float V = constrain(Vout, calV[0], calV[N_CAL-1]);
  int idx = 0;
  while (idx < N_CAL-1 && V > calV[idx+1]) idx++;

  // → piecewise interpolate raw PSI
  float psiRaw = calPSI[idx]
               + (calPSI[idx+1] - calPSI[idx])
               * (V - calV[idx])
               / (calV[idx+1] - calV[idx]);

  // [3] apply your two-point trim
  float psiCal = (psiRaw + CAL_OFFSET) * CAL_GAIN;

  // → round for display/PWM
  int psiMap = psiCal >= 0
               ? int(psiCal + 0.5f)
               : int(psiCal - 0.5f);

  // [4] PWM control (same simple P-controller)
  float error = psiSet - psiMap;
  int duty = constrain(int((error / 15.0f) * 255.0f), 0, 255);
  analogWrite(SOL_PIN, duty);

  // [5] OLED redraw (unchanged)
  u8g2.clearBuffer();
  u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_boostguage);

  int barW = psiMap > 0
           ? map(constrain(psiMap,0,BAR_SCALE_MAX_PSI), 0, BAR_SCALE_MAX_PSI, 0, BAR_MAX_W)
           : 0;
  u8g2.drawBox(BAR_X, BAR_Y, barW, BAR_HEIGHT);

  u8g2.setFont(u8g2_font_fub11_tr);
  u8g2.setCursor(0, 62);
  u8g2.print(psiSet);
  u8g2.print(" PSI");

  char buf[12];
  snprintf(buf, sizeof(buf), "%d PSI", psiMap);
  uint8_t tw = u8g2.getUTF8Width(buf);
  u8g2.setCursor(128 - tw, 62);
  u8g2.print(buf);

  u8g2.sendBuffer();

  // [6] Serial output for laptop
  // Format:  Vout:0.123 V, PSI:-0.4
  Serial.print("Vout:");
  Serial.print(Vout, 3);
  Serial.print(" V,  PSI:");
  Serial.println(psiCal, 1);

  delay(100);  // 10 Hz update
}
