#include <Arduino.h>
#include <U8g2lib.h>

// SH1106 128×64 I²C OLED
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, U8X8_PIN_NONE);

// 'boostguage', 128x64px (static background)
const unsigned char epd_bitmap_boostguage [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xf8, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xe0, 0x3e, 0x00, 0x00, 0xb8, 0x0f, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0xe0, 0x36, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xc0, 0x36, 0x00, 0x00, 0xb0, 0x0f, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xc0, 0x36, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 
	0xd8, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0xc0, 0x36, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 
	0xf8, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0xc0, 0x3e, 0x00, 0x00, 0xb0, 0x0f, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 
	0x20, 0x80, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x02, 0x08, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x09, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xaa, 0xaa, 0xaa, 0x0a, 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x70, 0x77, 0x1c, 0x63, 0xee, 0x00, 0x00, 0x00, 0xc0, 0xd9, 0xd5, 0x05, 0x8e, 0x31, 0x77, 0x00, 
	0x10, 0x21, 0xa4, 0x94, 0x42, 0x02, 0x00, 0x00, 0x40, 0x85, 0x54, 0x05, 0x52, 0x4a, 0x21, 0x01, 
	0x70, 0x27, 0xbc, 0x94, 0x4e, 0x00, 0x00, 0x00, 0xc0, 0x85, 0xd4, 0x05, 0x4e, 0x4a, 0x27, 0x00, 
	0x40, 0x21, 0xa4, 0x94, 0x48, 0x02, 0x00, 0x00, 0x40, 0x85, 0x54, 0x05, 0x52, 0x4a, 0x24, 0x01, 
	0x70, 0x27, 0x1c, 0x63, 0x4e, 0x00, 0x00, 0x00, 0x40, 0x99, 0x5c, 0x1d, 0x8e, 0x31, 0x27, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t POT_PIN = A1;
const uint8_t MAP_PIN = A0;

void setup() {
  u8g2.begin();
}

void loop() {
  // 1) Pot set-point → 5–15 PSI
  int rawPot = analogRead(POT_PIN);
  int psiSet = map(rawPot, 0, 1023, 5, 15);

  // 2) MAP sensor → voltage → –1 bar…+2 bar → –14.5 PSI…+29 PSI
  int rawMap = analogRead(MAP_PIN);
  float Vout = rawMap * (5.0f / 1023.0f);

  // Sensor calibration: 0.045 V @ –1 bar, 5 V @ +2 bar
  // slope = (5 – 0.045) / (2 – (–1)) = 4.955 / 3 ≈ 1.6517 V/bar
  // intercept b satisfies 0.045 = m*(–1) + b → b ≈ 1.6967 V
  const float m = 1.6517f;
  const float b = 1.6967f;

  float pressureBar = (Vout - b) / m;          // –1 … +2
  float psiMapF = pressureBar * 14.5038f;      // –14.5 … +29

  // clamp to sensor’s valid range (optional)
  psiMapF = constrain(psiMapF, -14.5f, 29.0f);

  // round to nearest integer
  int psiMap = (psiMapF >= 0) ? int(psiMapF + 0.5f) : int(psiMapF - 0.5f);

  // 3) Draw static background
  u8g2.clearBuffer();
  u8g2.drawXBMP(0, 0, 128, 64, epd_bitmap_boostguage);

  // 4) Horizontal bar fill for positive PSI only (0…29 PSI → 0…116 px)
  const uint8_t BAR_X      = 6;
  const uint8_t BAR_Y      = 16;
  const uint8_t BAR_MAX_W  = 116;
  const uint8_t BAR_HEIGHT = 8;

  int barW = 0;
  if (psiMap > 0) {
    // map 1…29 PSI to 1…116 px; anything above 29 PSI stays full
    barW = map(constrain(psiMap, 0, 29), 0, 29, 0, BAR_MAX_W);
  }
  u8g2.drawBox(BAR_X, BAR_Y, barW, BAR_HEIGHT);

  // 5) Pot set-point text, lower-left
  u8g2.setFont(u8g2_font_fub11_tr);
  u8g2.setCursor(0, 62);
  u8g2.print(psiSet);
  u8g2.print(" PSI");

  // 6) MAP reading text (can be negative), bottom-right
  char buf[12];
  snprintf(buf, sizeof(buf), "%d PSI", psiMap);
  uint8_t tw = u8g2.getUTF8Width(buf);
  u8g2.setCursor(128 - tw, 62);
  u8g2.print(buf);

  // 7) Send to screen
  u8g2.sendBuffer();
  delay(100);
}
